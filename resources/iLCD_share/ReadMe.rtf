{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17260\viewh12940\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 For any question, please contact me at this address : \
remy.cazabet \\@/ gmail\'b0com\
---------------\
\
---------------------------------------------\
PRESENTATION\
---------------------------------------------\
This version of ILCD match with what is described in my PhD thesis, and might differ from what is described in previous paper. Please feel free to ask for more information.\
\
iLCD is a "meta-algorithm", an algorithm from which some parts are defined and some parts are not instantiated. iLCD describes how to deal with a temporal network in order to manage communities : when to check for new communities, when to check for communities merging, when a community can add a node, and so on and so forth. However, iLCD do not describe how these operations are done : how do we decide to integrate a node to a community ? How do we decide that a new community appears, or that a community must die ?\
In order to use iLCD on an actual network, you need to use an IMPLEMENTATION of iLCD.\
What are described in the papers \
-1)"Detection of overlapping communities in dynamical social networks"\
-2)"Simulate to Detect: a Multi-agent System for Community Detection"\
are implementations of iLCD\
\
In this source code, currently, you'll only find the second implementation, the one described in paper 2)\
\
---------------------------------------------\
HOW TO USE (jar file)\
---------------------------------------------\
just launch the jar file, giving at least one parameter : the file do deal with.\
exemple : \
\
java -jar iLCD-2013 -i myInputFile.xxx\
\
the input file might be one of the following format : \
.ncol : a simple edge list. No dates. order of edges in the file will be considered as order of create. no edges removal\
.lnd : a very simple format : lines can be one of the two following choices : \
	DATE	+	n1	n2  //creation of a link between n1 and n2 at the date DATE\
	DATE	-	n1	n2  //removal of a link between n1 and n2 at the date DATE\
.tnf : 3 possible cases  :\
#DATE //change of date\
+	n1	n2 //edge creation\
-	n1	n2 //edge disparition\
(in all cases, the separator is TAB.)\
\
this will give you 2 outputs : \
.tcom : a "summary" file, giving all detected communities which haven't be merged with other communities (they "died" or they are still alive), along with their creation date and death date, if relevant.\
.ctnf : describe all modifications of communities during the whole detection. Also include all modifications of the network. Pretty hard to read in this form. (that's what the .tcom file is for\'85)\
I provide also a jar file to visualize a .ctnf file. If your network is small, that's good. Otherwise, ask me, I have other solutions, but not clean enough to be freely shared\'85.\
\
There are other options, just run java -jar iLCD-2013 to get more info\
\
---------------------------------------------\
HOW TO MODIFY (create your own implementation)\
---------------------------------------------\
(you need the "args4j" library and the "trove" library in order to get the applications to work)\
There are actually 3 things that you can easily modify in the source code : \
-add your own file reader. If you like another file format, just create a class implementing the InputHandlerInterface. And send it to me \'85\
-add you own file writer. same thing as above, with OutputHandlerInterface\
-create your implementation of iLCD : create a class implementing the "implementation" abstract class. Look carefully at it, and at the provided implementation. And let me know, of course !\
\
}